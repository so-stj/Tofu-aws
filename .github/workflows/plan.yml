name: Workflow for OpenTofu Plan

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

env:
  AWS_ROLE_ARN: ${{ secrets.AWS_OIDC_ROLE_ARN }}

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write

jobs:
  opentofu_plan_and_comment:
    runs-on: self-hosted

    strategy:
      matrix:
        directory: ["Tofu"]

    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.directory }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: OpenTofu fmt check
        id: fmt
        run: tofu fmt -check -recursive
        continue-on-error: true

      - name: OpenTofu init
        id: init
        run: tofu init

      - name: OpenTofu validate
        id: validate
        run: tofu validate

      - name: OpenTofu plan
        id: plan
        run: |
          set -o pipefail
          output=$(tofu plan 2>&1)
          echo "$output"
          # safely expose multi-line output
          echo "stdout<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output"        >> "$GITHUB_OUTPUT"
          echo "EOF"            >> "$GITHUB_OUTPUT"

      - name: Comment OpenTofu Plan Result
        uses: actions/github-script@v6
        with:
          script: |
            const output = `### 🛠️ OpenTofu CI/CD Plan Result

#### 🧹 Format and Style: \`${{ steps.fmt.outcome }}\`
#### 📦 Initialization: \`${{ steps.init.outcome }}\`
#### 🔍 Validation: \`${{ steps.validate.outcome }}\`
#### 📋 Plan: \`${{ steps.plan.outcome }}\`

<details>
<summary>Show Plan Output</summary>

\`\`\`
${{ steps.plan.outputs.stdout }}
\`\`\`
</details>

*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Directory: \`${{ matrix.directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
